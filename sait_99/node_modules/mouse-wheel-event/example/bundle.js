/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**************************!*\
  !*** ./example/index.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var wheel = __webpack_require__(/*! .. */ 1)
	var el = document.getElementById('demo')
	wheel(el, function (dx, dy) {
	  console.log(dy)
	}, true)
	


/***/ },
/* 1 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var event = __webpack_require__(/*! event */ 2);
	
	// detect available wheel event
	var support = "onwheel" in document.createElement("div") ? "wheel" : // Modern browsers support "wheel"
	        document.onmousewheel !== undefined ? "mousewheel" : // Webkit and IE support at least "mousewheel"
	        "DOMMouseScroll"; // let's assume that remaining browsers are older Firefox
	
	module.exports = function( elem, callback, useCapture ) {
	  // handle MozMousePixelScroll in older Firefox
	  if( support == "DOMMouseScroll" ) {
	    return _addWheelListener( elem, "MozMousePixelScroll", callback, useCapture );
	  } else {
	    return _addWheelListener( elem, support, callback, useCapture );
	  }
	};
	
	function _addWheelListener( elem, eventName, callback, noscroll ) {
	  var lineHeight = getLineHeight(elem)
	  function cb(e) {
	    if (noscroll) e.preventDefault ?  e.preventDefault() : e.returnValue = false;
	    if (support == 'wheel') return callback(e.deltaX, e.deltaY, e.deltaZ)
	    !e && ( e = window.event );
	    var dx = e.deltaX || 0
	    var dy = e.deltaY || 0
	    var dz = e.deltaZ || 0
	
	    var mode = e.deltaMode
	    var scale = 1
	    switch(mode) {
	      case 1:
	        scale = lineHeight
	      break
	      case 2:
	        scale = window.innerHeight
	      break
	    }
	    dx *= scale
	    dy *= scale
	    dz *= scale
	
	    // calculate deltaY (and deltaX) according to the event
	    if ( support == "mousewheel" ) {
	        dy = - 1/40 * e.wheelDelta;
	        // Webkit also support wheelDeltaX
	        dx && ( e.deltaX = - 1/40 * e.wheelDeltaX );
	    } else if (dy === 0) {
	        dy = e.detail;
	    }
	
	    // it's time to fire the callback
	    return callback(dx, dy, dz);
	  }
	  event.bind(elem, eventName, cb, false)
	  return function () {
	    event.unbind(elem, eventName, cb, false)
	  }
	}
	
	function getLineHeight(element){
	  var temp = document.createElement(element.nodeName);
	  temp.setAttribute("style", "margin:0px;padding:0px;font-size:" + element.style.fontSize);
	  temp.innerHTML = "t";
	  temp = element.parentNode.appendChild(temp);
	  var h = temp.clientHeight;
	  temp.parentNode.removeChild(temp);
	  return h;
	}


/***/ },
/* 2 */
/*!************************************!*\
  !*** ./~/component-event/index.js ***!
  \************************************/
/***/ function(module, exports) {

	var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
	    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
	    prefix = bind !== 'addEventListener' ? 'on' : '';
	
	/**
	 * Bind `el` event `type` to `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */
	
	exports.bind = function(el, type, fn, capture){
	  el[bind](prefix + type, fn, capture || false);
	  return fn;
	};
	
	/**
	 * Unbind `el` event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */
	
	exports.unbind = function(el, type, fn, capture){
	  el[unbind](prefix + type, fn, capture || false);
	  return fn;
	};

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map