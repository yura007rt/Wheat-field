'use strict'
var event = require('event')

// detect available wheel event
var support = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"
        document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
        'DOMMouseScroll'

module.exports = function( elem, callback, useCapture ) {
  // handle MozMousePixelScroll in older Firefox
  if( support == 'DOMMouseScroll' ) {
    return _addWheelListener( elem, 'MozMousePixelScroll', callback, useCapture )
  } else {
    return _addWheelListener( elem, support, callback, useCapture )
  }
}

function _addWheelListener( elem, eventName, callback, noscroll ) {
  var lineHeight = getLineHeight(elem)
  function cb(e) {
    if (noscroll) e.preventDefault ?  e.preventDefault() : e.returnValue = false
    if (support == 'wheel') return callback(e.deltaX, e.deltaY, e.deltaZ, e)
    !e && ( e = window.event )
    var dx = e.deltaX || 0
    var dy = e.deltaY || 0
    var dz = e.deltaZ || 0

    var mode = e.deltaMode
    var scale = 1
    switch(mode) {
      case 1:
        scale = lineHeight
      break
      case 2:
        scale = window.innerHeight
      break
    }
    dx *= scale
    dy *= scale
    dz *= scale

    // calculate deltaY (and deltaX) according to the event
    if ( support == 'mousewheel' ) {
        dy = - 1/40 * e.wheelDelta
        // Webkit also support wheelDeltaX
        dx && ( e.deltaX = - 1/40 * e.wheelDeltaX )
    } else if (dy === 0) {
        dy = e.detail
    }

    // it's time to fire the callback
    return callback(dx, dy, dz, e)
  }
  event.bind(elem, eventName, cb, false)
  return function () {
    event.unbind(elem, eventName, cb, false)
  }
}

function getLineHeight(element){
  if (element.parentNode == null) return 18
  var temp = document.createElement(element.nodeName)
  temp.setAttribute('style', 'margin:0px;padding:0px;font-size:' + element.style.fontSize)
  temp.innerHTML = 't'
  temp = element.parentNode.appendChild(temp)
  var h = temp.clientHeight
  temp.parentNode.removeChild(temp)
  return h
}
